// GENERATED CODE
// Do not edit this file.

var GrpcContext = require("@echo-health/react-grpc").GrpcContext;
var Proto = require("./proto_pb_service").Proto;
var React = require("react");
var greeting_proto = require("./proto_pb");
var grpc = require("grpc-web-client").grpc;

function createHelloRequest(obj) {
  var req = new greeting_proto.HelloRequest();

  if (Object.prototype.hasOwnProperty.call(obj, "name")) {
    req.setName(obj.name);
  }

  return req;
}

function createHelloReplay(obj) {
  var req = new greeting_proto.HelloReplay();

  if (Object.prototype.hasOwnProperty.call(obj, "message")) {
    req.setMessage(obj.message);
  }

  return req;
}

function makeRequest(methodDescriptor, request, host, getMetadata) {
  return new Promise(async (resolve, reject) => {
    const metadata = await getMetadata();

    grpc.unary(methodDescriptor, {
      metadata: metadata,
      request: request,
      host: host,
      onEnd: function(result) {
        if (result.status !== grpc.Code.OK) {
          reject(result);
        } else {
          resolve(result);
        }
      }
    });
  });
}

function getHook(messageCreator, serviceMethodName) {
  return function(requestData) {
    var loadingUseState = React.useState(true);
    var isLoading = loadingUseState[0];
    var setIsLoading = loadingUseState[1];

    var responseUseState = React.useState({});
    var response = responseUseState[0];
    var setResponse = responseUseState[1];

    var errorUseState = React.useState(null);
    var error = errorUseState[0];
    var setError = errorUseState[1];

    context = React.useContext(GrpcContext);

    if (!context) {
      throw new Error(
        "No context provided. Make sure to wrap your app with the <GrpcContext /> component from @echo-health/react-grpc-provider."
      );
    }

    var request = messageCreator(requestData);

    function getData() {
      setIsLoading(true);
      try {
        makeRequest(
          Proto[serviceMethodName],
          request,
          context.host,
          context.getMetadata
        )
          .then(function(res) {
            setResponse(res);
            setIsLoading(false);
          })
          .catch(function(err) {
            setError(err);
            setIsLoading(false);
          });
      } catch (err) {
        setError(err.message);
        setIsLoading(false);
      }
    }

    React.useEffect(() => {
      getData();
    }, [request.serializeBinary().toString()]);

    var data =
      response && response.message ? response.message.toObject() : undefined;

    return {
      isLoading: isLoading,
      response: response,
      data: data,
      error: error
    };
  };
}

module.exports.useSayHello = getHook(createHelloRequest, "SayHello");

module.exports.useSayHelloAgain = getHook(createHelloRequest, "SayHelloAgain");
